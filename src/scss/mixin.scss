@use "sass:map";
@use "sass:math";
@use "@angular/material" as mat;

@mixin gradient($direction, $color, $base: 1) {
  $list:
    adjust-color($color, $alpha: -1) 0%,
    adjust-color($color, $alpha: -0.2 * $base) 25%,
    adjust-color($color, $alpha: -0.1 * $base) 50%,
    adjust-color($color, $alpha: -0.1 * $base) 66%,
    adjust-color($color, $alpha: -0.2 * $base) 75%,
    adjust-color($color, $alpha: -1) 100%;
  background: linear-gradient(to $direction, $list);
}

@mixin lightbox {
  box-shadow:
    rgba(172, 160, 160, 0.534) 0px 5px 15px,
    rgba(183, 170, 170, 0.669) 0px -15px 15px,
    rgba(0, 0, 0, 0.12) 0px 4px 6px,
    rgba(0, 0, 0, 0.17) 0px 2px 3px,
    rgba(0, 0, 0, 0.09) 0px -1px 5px;
  overflow: hidden;
}

$blue: mat.m2-define-palette(mat.$m2-green-palette);

@mixin color-modifiers($prefix, $attribute: "background-color") {
  @for $i from 1 through 70 {
    [#{$prefix}="#{$i}"] {
      #{$attribute}: change-color(mat.get-theme-color($theme, primary, 500), $alpha: $i * 0.01);
    }
  }
}

@function event-colors($theme) {
  $reject: mat.get-theme-color($theme, on-error);
  $interview: mat.get-theme-color($theme, secondary);
  $applied: mat.get-theme-color($theme, primary);
  $response: darken(get-theme-color($theme, tertiary));

  $events: (
    applied: $applied,
    interview: $interview,
    reject: $reject,
    response: $response
  );

  @return $events;

}

@function status-colors($theme) {
  $events: (
    in_progress: fade-out(mat.get-theme-color($theme, primary), 0.9),
    rejected: fade-out(mat.get-theme-color($theme, on-error), 0.9),
  );

  @return $events;

}

